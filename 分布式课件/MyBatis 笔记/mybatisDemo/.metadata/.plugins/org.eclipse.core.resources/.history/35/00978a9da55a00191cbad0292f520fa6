单个参数：mybatis不会做任何处理
  #{参数名}：取出参数值
多个参数：mybatis会做特殊处理
    多个参数会被封装成一个map
    key:param1.....paramN,或者参数的索引也可以,从0开始。
    value:传入的参数值
    #{}就是从map中获取指定的key的值。
    操作：
        方法：public Employee getEmpByIdAndLastName(String id,String lastName);
        取值方案1：#{parm1},#{parm2}
        
命名参数：明确指定封装参数时map的key: 
   多个参数会被封装成一个map
     key：使用@Param注解指定的值           
     value:参数值
     public Employee getEmpByIdAndLastName(@Param("id") String id,@Param("lastName") String lastName);   
     取值方案2：#{id},${lastName}
     #{指定的key}：取出参数值
     
如果多个参数正好是我们业务逻辑的数据模型，直接传入pojo（简单模型model）
     #{属性名}：取出传入的pojo的属性值
     
如果多个参数不是我们业务逻辑的数据模型，不经常使用，为了方便,我们可以传入map
    public Employee getEmpByIdAndLastName(Map<key,String> map);
    #{key}:取出map中对应的值stringval
    
TO:   
如果多个参数不是我们业务逻辑的数据模型，但是经常使用，推荐编写一个TO（Transfer Object）
Page{
   int index;
   int size;
}

===========================思考========================
1.   public Employee getEmp(@Param("id") String id,String lastName);
           取值：id==>#{id/param1}  lastName==>#{param2}
    
2.   public Employee getEmp(@Param("id") String id,@Param("emp") Employee emp);
           取值：id==>#{param1}  lastName==>#{param2.lastName/emp.lastName}   
 
3.   ##特别注意：如果是Connection (List、Set)类型或者是数组
                                  也会特殊处理。也是把传入的list或者数组封装在map中。
                 key:Connection(connection),如果是List还可以使用这个key(list), 数组（array）
       public Employee getEmp(List<Integer> ids)
             取值：取出第一个id的值：   #{list[0]}
 
 ==================结合源码，mybatis怎么处理参数===============
 
 ==================参数值的获取=====================
 #{}:可以获取map中的值或者pojo对象属性的值
 ${}:可以获取map中的值或者pojo对象属性的值
 select * from tbl_employee where id=${id} and last_name=#{lastNmae}
 Preparing: select * from tbl_employee where id=2 and last_name=?
 区别：
     #{}:是以预编译的形式，将参数设置到sql语句中；PreparedStatement;只能取参数位置的值
         假如是表名是动态的话，就不能解析；
         // 封装参数
         Map.put("tbl_name","tbl_employee");
         Map.put("id",1);
         Map.put("lastName","tom");
         // 获取参数
         select * from $(tbl_name) where id=${id} and last_name=#{lastName}
     ${}:取出的值直接拼装在sql语句中；会有安全问题；sql注入漏洞
     大多数情况下，我们取参数的值都应该去使用#{}；
     原生jdbc不支持占位符的地方我们可以使用${}进行取值
     比如分表、排序。。。：按照年份分表拆分
     select * from 2017_salary where xxx;
     select * from ${year}_salary where xxx;
     select * from tbl_employee order by ${f_name} ${order}
 
 
 =================#{}更多的用法=====================
 #{}：更丰富的用法：
           规定参数的一些规则：
     javaType、jdbcType、mode(存储过程)、numericScale、
     resultMap、typeHandler、jdbcTypeName、expression(未来准备支持的功能)
     
     jdbcType通常需要在某种特定的条件下被设置：
                  在我们数据为null的时候，有些数据库可能不能识别mybatis为null的默认处理；比如oracle(报错)
         
         JdbcType OTHER:无效的数据类型；因为mybatis对所有的null都映射的是原生Jdbc的 OTHER类型
         
     
     
 