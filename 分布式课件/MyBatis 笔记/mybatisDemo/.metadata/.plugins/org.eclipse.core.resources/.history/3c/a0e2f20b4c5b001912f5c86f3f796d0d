<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ln.mybaits.dao.EmployeeMapperDynamicSQL">
	<!-- if| choose(when,otherwise)| trim(where,set)| foreach -->

	<!-- 查询员工，要求，携带了哪个字段条件就带上这个字段的值 -->
	<!-- public List<Employee> getEmpsByConditionIf(Employee employee) ; -->
	<select id="getEmpsByConditionIf" resultType="com.ln.mybaits.bean.Employee">
		select * from tbl_employee
		<!-- where -->
		<where>
			<!-- test:判断表达式 (OGNL) c:if test一样 从参数中取值进行判断 遇见特殊符号应该去写转义字符 ''=====&quot;&quot; 
				trim():截取 -->
			<if test="id!=null">
				id=#{id} and
			</if>
			<if test="lastName!=null and lastName!=&quot;&quot;">
				and last_name like #{lastName}
			</if>
			<!-- -->
			<if test="email!=null and email.trim()!=&quot;&quot;">
				and email=#{email}
			</if>
			<!-- ognl会进行字符串与数字的转换判断 -->
			<if test="gender==0 or gender==1">
				and gender=#{gender}
			</if>
		</where>
	</select>


	<!-- public List<Employee> getEmpsByConditionTrim(Employee employee) ; -->
	<select id="getEmpsByConditionTrim" resultType="com.ln.mybaits.bean.Employee">
		select * from tbl_employee
		<!-- 后面多出来的and或者or，where标签并不能解决 prefix="":前缀：trim标签体是整个字符串拼装后的结果； prefix给整个拼串后的结果加前缀 
			prefixOverrides="": 前缀覆盖：去掉整个字符串前面多余的字符字符 suffix="":后缀 suffix给整个拼串后的结果加后缀 
			suffixOverrides="" 后缀覆盖：去掉整个字符串后面多余的字符字符 -->
		<trim prefix="where" prefixOverrides="" suffix=""
			suffixOverrides="and">
			<if test="id!=null">
				id=#{id} and
			</if>
			<if test="lastName!=null and lastName!=&quot;&quot;">
				last_name like #{lastName} and
			</if>
			<!-- -->
			<if test="email!=null and email.trim()!=&quot;&quot;">
				email=#{email} and
			</if>
			<!-- ognl会进行字符串与数字的转换判断 -->
			<if test="gender==0 or gender==1">
				gender=#{gender}
			</if>
		</trim>
	</select>


	<!-- public List<Employee> getEmpsByConditionChoose(Employee employee) ; -->
	<select id="getEmpsByConditionChoose" resultType="com.ln.mybaits.bean.Employee">
		select * from tbl_employee
		<!-- choose(when,otherwise)如果携带了id，就用id查询，如果携带了lastName，用lastName查询 -->
		<where>
			<choose>
				<when test="id!=null">
					id=#{id}
				</when>
				<when test="lastName!=null and lastName!=&quot;&quot;">
					last_name like #{lastName}
				</when>
				<!-- -->
				<when test="email!=null and email.trim()!=&quot;&quot;">
					email=#{email}
				</when>
				<otherwise>
					gender=0
				</otherwise>
			</choose>
		</where>
	</select>


	<!-- public void updateEmp(Employee employee) ; -->
	<update id="updateEmp">
		<!-- 1、使用set、if方案 2、使用trim、if方案。能解决，问题 -->
		<!-- update tbl_employee <set> <if test="last!=null"> last_name=#{lastName}, 
			</if> <if test="email!=null"> email=#{email}, </if> <if test="gender!=null"> 
			gender=#{gender} </if> </set> where id=#{id} -->


		update tbl_employee
		<trim prefix="set" suffixOverrides=",">
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender}
			</if>
		</trim>
		where id=#{id}

	</update>


	<!-- public List<Employee> getEmpsByConditionForeach(List<Integer> ids) 
		; -->
	<select id="getEmpsByConditionForeach" resultType="com.ln.mybaits.bean.Employee">
		select * from tbl_employee where id in
		<!-- collection:指定要遍历的集合 list类型的参数会做特殊处理封装在map中，map的key就叫list item:将遍历出的元素赋值给指定的变量 
			#{变量名}就能取出变量的值也就是当前遍历的元素 separator:每个元素之间的分隔符 open:遍历所有结果拼接一个开始的字符 close:遍历所有结果拼接一个结束的字符 
			index:索引。遍历list的时候index是索引, 遍历map的时候index是map的key,item就是map的值 -->
		<foreach collection="ids" item="item_id" separator="," open="("
			close=")">
			#{item_id}
		</foreach>

	</select>

	<!-- public void addEmp(@Param("emps") List<Employee> employee) ; -->
	<!-- mysql下批量保存：可以用foreach遍历，因为mysql可以支持values(),(),(),() 语法 -->
	<!-- <insert id="addEmp"> insert into tbl_employee(last_name,email,gender) 
		values <foreach collection="emps" item="emp" separator=","> (#{emp.lastName},#{emp.email},#{emp.gender}) 
		</foreach> </insert> -->
		
	<!-- 使用foreach,sql语句生产批量，但是要开启mysql支持，一次性可以支持多条语句，在连接url方式上添加allowMultiQueries=true
	allowMultiQueries=true
	-->	
	<insert id="addEmp">	
		<foreach collection="emps" item="emp" separator=";">
		insert into tbl_employee(last_name,email,gender)
		values(#{emp.lastName},#{emp.email},#{emp.gender})
		</foreach>
	</insert>

<!-- oracle批量保存 使用begin、end;-->
<!-- 第一种方式 -->
<!-- 	<insert id="addEmp" databaseId="oracle">	
		<foreach collection="emps" item="emp" separator=";" open="begin" close="end;">
		insert into tbl_employee(last_name,email,gender)
		values(#{emp.lastName},#{emp.email},#{emp.gender})
		</foreach>
	</insert>
第二种方式
	<insert id="addEmp" databaseId="oracle">	
		<foreach collection="emps" item="emp" separator=";" open="begin" close="end;">
		insert into tbl_employee(last_name,email,gender)
		values(#{emp.lastName},#{emp.email},#{emp.gender})
		</foreach>
	</insert> -->
	
	<!--
	两个内置参数
	  不只是方法传递过来的参数可以被用来判断、取值
	  mybatis默认还有两个内置参数
	  _parameter:代表整个参数
	   
	 -->
	
</mapper>
