<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ln.mybatis.dao.EmployeeMapper">
<!--  使用ehcache缓存-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
	<!-- <cache eviction="FiFO" flushInterval="60000" readOnly="false" size="1024"></cache> -->
	<!--
	 eviction:缓存回收策略； 默认的是LRU
	   - LRU：最近最少使用的；移除最长时间不被使用的对象；
	   - FiFO：先进先出；按对象进出缓存的顺序来移除它们；
	   - SOFT：软引用；移除基于垃圾回收器状态和软引用规则的对象。
	   - WEAK：弱引用；更积极的移除基于垃圾回收器状态和弱引用规则的对象。
	            默认的是LRU
	 flushInterval：缓存刷新间隔；缓存多长时间清空一次，默认是不清空。单位是毫秒
	 readOnly：是否只读；
	     true:只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
	           mybatis为了加快获取速度，直接就会从缓存中的引用交给用户。不安全，但是速度快
	     false：非只读：mybatis认为获取的数据可能会被修改。mybatis会利用序列化和反序列化的技术克隆一份新的数据给你。
	                           安全，但是速度慢
     size:缓存存放多少元素；
     type:指定自定义缓存的全类名；实现Cache接口即可；	                           
	     
	 -->

	<!-- namespace名称空间:指定接口的全类名 id 唯一表示 resultType 返回值类型 #{id}:从传来的参数中取出id值 
		public Employee getEmployee(Integer id); -->
	<select id="getEmployee" resultType="com.ln.mybaits.bean.Employee">
		select id,last_name lastName,gender,email from tbl_employee where id = #{id}
	</select>
	
	<!--
	public Map<Integer, Employee> getEmpByLastNameLikeReturnMap(String lastName); 
	 -->
	<select id="getEmpByLastNameLikeReturnMap" resultType="com.ln.mybaits.bean.Employee">
	select * from tbl_employee where last_name like #{lastName}
	</select>
	
	<!--
	public Map<String ,Object> getEmpByidReturnMap(int id);  
	-->
	<select id="getEmpByidReturnMap" resultType="map">
	select * from tbl_employee where id = #{id}
	</select>
	
	<!--
	 public List<Employee> getEmpByLastNameLike(String lastName);
	  resultType:如果返回的是一个集合，要写集合中元素的类型
	 -->
	<select id="getEmpByLastNameLike" resultType="com.ln.mybaits.bean.Employee">
		select * from tbl_employee where last_name like #{lastName}
	</select>
	
	<!--parameterType可以省略 如果要写，就指定全类名或者别名 
	     mysql支持自增主键 ，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys();
	     useGeneratedKeys="true"，使用自增主键获取主键值
	     keyProperty:指定对应的主键属性，也就是mybatis获取以后，将这个值封装给Javabean的哪个属性
	 -->
	<insert id="addEmp" parameterType="com.ln.mybaits.bean.Employee"
	useGeneratedKeys="true" keyProperty="id">
	    insert into tbl_employee (last_name,email,gender)
	    values(#{lastName},#{email},#{gender}) 
	</insert>
	<!--
	  Oracle不支持自增，Oracle使用序列来模拟自增；
	   每次插入的数据的主键都是从序列中获取的值；
	 -->
	 <insert id="addEmp" databaseId="oracle">
	 <!-- keyProperty="id":查出的主键值封装给javabean的id属性
	 order="BEFORE"  ：这个sql在插入sql之前执行
	        AFTER:在插入sql执行之后，如果需要获取值用xxx.curval
	 resultType="Integer"：查出的数据返回值类型
	 运行顺序：
	      先运行selectKey查询id的sql,查出的id值封装给javabean的id属性
	      再运行插入的sql；就可以去除id属性对应的值
	  -->
	     <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
	        select xxxx.nextval from dual;
	     </selectKey>
	    insert into tbl_employee (id,last_name,email,gender)
	    values(#{id},#{lastName},#{email},#{gender}) 
	</insert>
	 
	<update id="updateEmp">
	   update tbl_employee
	    set last_name=#{lastName}, email=#{email}, gender=#{gender}
	    where id =${id}
	</update>
	
	<delete id="deleteEmpById">
	   delete from tbl_employee where id=#{id}
	</delete>
</mapper>